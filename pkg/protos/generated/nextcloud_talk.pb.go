// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nextcloud_talk.proto

package nextcloudTalk

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OutChat struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	ActorID              string   `protobuf:"bytes,3,opt,name=ActorID,proto3" json:"ActorID,omitempty"`
	ActorDisplayName     string   `protobuf:"bytes,4,opt,name=ActorDisplayName,proto3" json:"ActorDisplayName,omitempty"`
	Message              string   `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutChat) Reset()         { *m = OutChat{} }
func (m *OutChat) String() string { return proto.CompactTextString(m) }
func (*OutChat) ProtoMessage()    {}
func (*OutChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbedc122ac8e40eb, []int{0}
}

func (m *OutChat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutChat.Unmarshal(m, b)
}
func (m *OutChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutChat.Marshal(b, m, deterministic)
}
func (m *OutChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutChat.Merge(m, src)
}
func (m *OutChat) XXX_Size() int {
	return xxx_messageInfo_OutChat.Size(m)
}
func (m *OutChat) XXX_DiscardUnknown() {
	xxx_messageInfo_OutChat.DiscardUnknown(m)
}

var xxx_messageInfo_OutChat proto.InternalMessageInfo

func (m *OutChat) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OutChat) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *OutChat) GetActorID() string {
	if m != nil {
		return m.ActorID
	}
	return ""
}

func (m *OutChat) GetActorDisplayName() string {
	if m != nil {
		return m.ActorDisplayName
	}
	return ""
}

func (m *OutChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InChat struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InChat) Reset()         { *m = InChat{} }
func (m *InChat) String() string { return proto.CompactTextString(m) }
func (*InChat) ProtoMessage()    {}
func (*InChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbedc122ac8e40eb, []int{1}
}

func (m *InChat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InChat.Unmarshal(m, b)
}
func (m *InChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InChat.Marshal(b, m, deterministic)
}
func (m *InChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InChat.Merge(m, src)
}
func (m *InChat) XXX_Size() int {
	return xxx_messageInfo_InChat.Size(m)
}
func (m *InChat) XXX_DiscardUnknown() {
	xxx_messageInfo_InChat.DiscardUnknown(m)
}

var xxx_messageInfo_InChat proto.InternalMessageInfo

func (m *InChat) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *InChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*OutChat)(nil), "nextcloudTalk.OutChat")
	proto.RegisterType((*InChat)(nil), "nextcloudTalk.InChat")
}

func init() {
	proto.RegisterFile("nextcloud_talk.proto", fileDescriptor_fbedc122ac8e40eb)
}

var fileDescriptor_fbedc122ac8e40eb = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0xad, 0x28,
	0x49, 0xce, 0xc9, 0x2f, 0x4d, 0x89, 0x2f, 0x49, 0xcc, 0xc9, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x85, 0x8b, 0x86, 0x24, 0xe6, 0x64, 0x4b, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4,
	0xea, 0x83, 0x25, 0x93, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x6a, 0x95, 0xfa,
	0x19, 0xb9, 0xd8, 0xfd, 0x4b, 0x4b, 0x9c, 0x33, 0x12, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x3c, 0x5d,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x98, 0x3c, 0x5d, 0x84, 0x44, 0xb8, 0x58, 0x43, 0xf2,
	0xb3, 0x53, 0xf3, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x09, 0x2e, 0x76,
	0xc7, 0xe4, 0x92, 0xfc, 0x22, 0x4f, 0x17, 0x09, 0x66, 0xb0, 0x38, 0x8c, 0x2b, 0xa4, 0xc5, 0x25,
	0x00, 0x66, 0xba, 0x64, 0x16, 0x17, 0xe4, 0x24, 0x56, 0xfa, 0x25, 0xe6, 0xa6, 0x4a, 0xb0, 0x80,
	0x95, 0x60, 0x88, 0x83, 0x4c, 0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x85, 0x98,
	0x02, 0xe5, 0x2a, 0x59, 0x70, 0xb1, 0x79, 0xe6, 0x81, 0xdd, 0x03, 0xb7, 0x9f, 0x11, 0xcd, 0x7e,
	0x98, 0x4e, 0x26, 0x14, 0x9d, 0x46, 0x5d, 0x8c, 0x5c, 0xbc, 0x7e, 0xc8, 0x5e, 0x17, 0xb2, 0xe5,
	0xe2, 0x0c, 0x4a, 0x4d, 0x4c, 0x01, 0x99, 0x56, 0x2c, 0x24, 0xa6, 0x07, 0x09, 0x08, 0x3d, 0x58,
	0x40, 0xe8, 0xb9, 0x82, 0x02, 0x42, 0x4a, 0x4c, 0x0f, 0x25, 0xbc, 0xf4, 0xa0, 0xc1, 0x61, 0xc0,
	0x28, 0x64, 0xc5, 0xc5, 0x19, 0x5e, 0x94, 0x59, 0x92, 0x0a, 0x76, 0x8d, 0x28, 0x9a, 0x32, 0x88,
	0x23, 0xa5, 0x70, 0x98, 0x9a, 0xc4, 0x06, 0xe6, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0xbd, 0x7e, 0x56, 0xa3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NextcloudTalkClient is the client API for NextcloudTalk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NextcloudTalkClient interface {
	ReadChats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NextcloudTalk_ReadChatsClient, error)
	WriteChat(ctx context.Context, in *InChat, opts ...grpc.CallOption) (*empty.Empty, error)
}

type nextcloudTalkClient struct {
	cc grpc.ClientConnInterface
}

func NewNextcloudTalkClient(cc grpc.ClientConnInterface) NextcloudTalkClient {
	return &nextcloudTalkClient{cc}
}

func (c *nextcloudTalkClient) ReadChats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NextcloudTalk_ReadChatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NextcloudTalk_serviceDesc.Streams[0], "/nextcloudTalk.NextcloudTalk/ReadChats", opts...)
	if err != nil {
		return nil, err
	}
	x := &nextcloudTalkReadChatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NextcloudTalk_ReadChatsClient interface {
	Recv() (*OutChat, error)
	grpc.ClientStream
}

type nextcloudTalkReadChatsClient struct {
	grpc.ClientStream
}

func (x *nextcloudTalkReadChatsClient) Recv() (*OutChat, error) {
	m := new(OutChat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nextcloudTalkClient) WriteChat(ctx context.Context, in *InChat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nextcloudTalk.NextcloudTalk/WriteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NextcloudTalkServer is the server API for NextcloudTalk service.
type NextcloudTalkServer interface {
	ReadChats(*empty.Empty, NextcloudTalk_ReadChatsServer) error
	WriteChat(context.Context, *InChat) (*empty.Empty, error)
}

// UnimplementedNextcloudTalkServer can be embedded to have forward compatible implementations.
type UnimplementedNextcloudTalkServer struct {
}

func (*UnimplementedNextcloudTalkServer) ReadChats(req *empty.Empty, srv NextcloudTalk_ReadChatsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadChats not implemented")
}
func (*UnimplementedNextcloudTalkServer) WriteChat(ctx context.Context, req *InChat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChat not implemented")
}

func RegisterNextcloudTalkServer(s *grpc.Server, srv NextcloudTalkServer) {
	s.RegisterService(&_NextcloudTalk_serviceDesc, srv)
}

func _NextcloudTalk_ReadChats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NextcloudTalkServer).ReadChats(m, &nextcloudTalkReadChatsServer{stream})
}

type NextcloudTalk_ReadChatsServer interface {
	Send(*OutChat) error
	grpc.ServerStream
}

type nextcloudTalkReadChatsServer struct {
	grpc.ServerStream
}

func (x *nextcloudTalkReadChatsServer) Send(m *OutChat) error {
	return x.ServerStream.SendMsg(m)
}

func _NextcloudTalk_WriteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextcloudTalkServer).WriteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nextcloudTalk.NextcloudTalk/WriteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextcloudTalkServer).WriteChat(ctx, req.(*InChat))
	}
	return interceptor(ctx, in, info, handler)
}

var _NextcloudTalk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nextcloudTalk.NextcloudTalk",
	HandlerType: (*NextcloudTalkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteChat",
			Handler:    _NextcloudTalk_WriteChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadChats",
			Handler:       _NextcloudTalk_ReadChats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nextcloud_talk.proto",
}
